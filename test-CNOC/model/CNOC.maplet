
# 
# 
# XOptima
# Solution of Optimal Control Problems (c) 
# University of Trento
# Optimal Control for CNCs
# Authors: 
# F.Biral, E.Bertolazzi, P. Bosetti
# Date:      16/04/2013   
# Load library
restart:
# Load optimal control library
with(plots):
with(XOptima):
interface(rtablesize=40):
# Equations of Dynamics
Tdir := [cos(theta(s(t))),sin(theta(s(t)))];
Ndir := [-sin(theta(s(t))),cos(theta(s(t)))];
EQ1 := diff(s(t),t) - vs(t)/(1-n(t)*kappa(s(t))) :
EQ2 := diff(n(t),t) - vn(t) :
EQ3 := diff(vs(t),t) - (as(t)+vs(t)*vn(t)*kappa(s(t))/(1-n(t)*kappa(s(t)))) :
EQ4 := diff(vn(t),t) - (an(t)-vs(t)^2*kappa(s(t))/(1-n(t)*kappa(s(t)))) :
EQ5 := diff(as(t),t) - (js(t)+vs(t)*an(t)*kappa(s(t))/(1-n(t)*kappa(s(t)))) :
EQ6 := diff(an(t),t) - (jn(t)-vs(t)*as(t)*kappa(s(t))/(1-n(t)*kappa(s(t)))) :
eqns_CNOC := subs([],[EQ||(1..6)]):<%> ;
xvars_CNOC := [s(t),n(t),vs(t),vn(t),as(t),an(t)] ;
uvars_CNOC := [js(t),jn(t)] ;
# Problem description
# It is a simple CN milling machine with two axes, X-Y
# kappa = curvature
# s          = curvilinear abscissa
# Fx, Fy = Forces along pysical axes
# Fu       = Force along tangential direction (u)
# Fv       = Force along lateral direction (v)
# theta  = angle of (u,v) in (X,Y) frame
# r         = orthogonal distance from the nominal path
# emx   = effective mass along x axes
# emy   = effective mass along y axes
# 
# Note that the toolpath is made of straight segments and circular arcs, so kappa is a piecewise function.

# Model equation in (s,r) and time
# 
# 
# 
# 
# Free time formulation
# System of equations: coV(zeta) = reciprocal of instant feedrate (= tangential speed) 
SS := seq( diff(xvars_CNOC[i],t)=diff(op(0,xvars_CNOC[i])(zeta),zeta)/coV(zeta),i=1..nops(xvars_CNOC)), t=zeta : <%>;
eqns_s := [seq( collect( subs( SS,eqns_CNOC[i]*coV(zeta)), coV(zeta)),
                i=1..nops(xvars_CNOC))
           ,diff(coV(zeta),zeta)
           ] : <%> ;
# State variables and controls
x_vars := [op(subs(t=zeta,xvars_CNOC)), coV(zeta)] ;
u_vars := subs(t=zeta,uvars_CNOC) ;
# Optimal control
# Optimal control problem definition
# Load dynamic system
# Load the ODE dynamic system: list of controls, state variables and differential equations.
# By default the command sets the independent variable to "zeta".
#Describe(loadDynamicSystem);
loadDynamicSystem(controls  = u_vars,
                  states    = x_vars,
                  equations = eqns_s);
# Boundary conditions and jump conditions
# Specify the standard boundary conditions and the additional boundary conditions, if needed.
# Here it is possible to activate some boundary conditions for automatic generation of input data file.
# It is still possible to change the activation/deactivation of boundary conditions  in the input data file.
VX := subs(t=zeta,vs(t)*Tdir[1] + vn(t)*Ndir[1]) ;
VY := subs(t=zeta,vs(t)*Tdir[2] + vn(t)*Ndir[2]) ;
AX := subs(t=zeta,as(t)*Tdir[1] + an(t)*Ndir[1]) ;
AY := subs(t=zeta,as(t)*Tdir[2] + an(t)*Ndir[2]) ;
JX := subs(t=zeta,js(t)*Tdir[1] + jn(t)*Ndir[1]) ;
JY := subs(t=zeta,js(t)*Tdir[2] + jn(t)*Ndir[2]) ;
addBoundaryConditions(initial =[n,vs,vn,as,an],
                      final   =[n,vs,vn,as,an],
                      generic =[[s(zeta_i)-zeta_i,"initial_s"],
                               [s(zeta_f)-zeta_f,"final_s"]]);
setStatusBoundaryConditions(generic=["initial_s"="enabled","final_s"="enabled"]);
# Display the boundary condition activation status:
infoBoundaryConditions();
# Target: performance criterion
# Specify the target function. There are three possibities:
# targetBolza(), targetLagrange(), targetMayer();
# Note that:
#  - the target must be specified as a function of the independent variable defined with the loadDynamicSystem() command 
#  - the Mayer term must be specified as a function of the initial and/or final value of the independent variable.
penScale := coV(zeta);
lgr := coV(zeta)*((sqrt(vs(zeta)^2+vn(zeta)^2)-nominalFeed())/deltaFeed)^2:
myr := 0 ;
setTarget(lagrange=lgr,mayer=myr);
# Constraints on Path
# Path constraint are uni-lateral and bi-lateral  constraints functions of state variables, controls, and independent variable "zeta".
# pf_error = path following error
#Describe(addUnilateralConstraint);
addUnilateralConstraint( coV(zeta) > 0,
                         timePositive,
                         epsilon   = 0.01, 
                         tolerance = 0.01,
                         barrier   = true );
addUnilateralConstraint( sqrt(vs(zeta)^2+vn(zeta)^2)/nominalFeed() <= 1+0.01,
                         vLimit,
                         subtype   = "PENALTY_PIECEWISE",
                         scale     = penScale,
                         epsilon   = 0.01,
                         tolerance = 0.01 );
addBilateralConstraint( n(zeta)/path_following_tolerance,
                        PathFollowingTolerance,
                        scale     = penScale,
                        epsilon   = 0.01,
                        tolerance = 0.1 );
addBilateralConstraint(as(zeta)/as_max,
                       as_limit,
                       scale     = penScale,
                       epsilon   = 0.01,
                       tolerance = 0.01);
addBilateralConstraint(an(zeta)/an_max,
                       an_limit,
                       scale     = penScale,
                       epsilon   = 0.01,
                       tolerance = 0.01);
addBilateralConstraint(AX/ax_max,
                       ax_limit,
                       scale     = penScale,
                       epsilon   = 0.01,
                       tolerance = 0.01);
addBilateralConstraint(AY/ay_max,
                       ay_limit,
                       scale     = penScale,
                       epsilon   = 0.01,
                       tolerance = 0.01);
# Constraints on Controls
# The following command sets the limits to the controls. If the control variable does not appear in the taget function nor in the other constraints, it is very likely that an explicit solution of the controls can be obtained from the hamiltonian with respect to the controls.
# Otherwise, a numerical solution is mandatory to solve the controls.
addControlBound( js(zeta),
                 scale       = penScale,
                 max         = js_max, # 30.0,
                 min         = js_min, #-50.0,
                 epsilon     = 0.01,
                 tolerance   = 0.01,
                 controlType ="U_LOGARITHMIC" ):
addControlBound( jn(zeta),
                 scale       = penScale,
                 maxabs      = jn_max, # 65,
                 epsilon     = 0.01,
                 tolerance   = 0.01,
                 controlType ="U_LOGARITHMIC"):
# Costruzione struttura dati 
#addUnilateralConstraint( (js(zeta)^2+jn(zeta)^2)/jmax^2<=1,
#                         jerkLimit,
#                         epsilon   = 0.01,
#                         tolerance = 0.01 );
PTS := [[0,0],[-10,0], [20,2], [50,0 ,0],[50,10,3.1415],[20,12],[-10,10],
              [-10,20],[20,22],[50,20,0],[50,30,3.1415],[20,32],[-10,30],
              [-10,40],[20,42],[50,40,0],[50,50,3.1415],[20,52],[-10,50],
              [-10,60],[20,62],[50,60]] ;
path := [] ;
totlen := 0 ;
scale_path := 1/1000.0 ;
for i from 2 to 21 do
  tmp := ["x0"=PTS[i][1]*scale_path,
          "y0"=PTS[i][2]*scale_path,
          "x1"=PTS[i+1][1]*scale_path,
          "y1"=PTS[i+1][2]*scale_path,
          "feedRate"=v_nom,
          "spindleRate"=3000,
          "crossSection"=1,
          "n"=mesh_segments]:
  SS  := [x0=PTS[i][1]*scale_path,
          y0=PTS[i][2]*scale_path,
          x1=PTS[i+1][1]*scale_path,
          y1=PTS[i+1][2]*scale_path]:
  if nops(PTS[i]) = 3 and nops(PTS[i+1]) = 3 then
    totlen := totlen + subs( SS, evalf((Pi/2)*sqrt((x1-x0)^2+(y1-y0)^2),50) ) ;
    tmp := [op(tmp),"angle0"=PTS[i][3],"angle1"=PTS[i+1][3]];
  else
    totlen := totlen + subs( SS, evalf(sqrt((x1-x0)^2+(y1-y0)^2),50) ) ;
    tmp := [op(tmp)];
  end ;
  path := [op(path),tmp]:
end:
totlen; # lunghezza totale
;
qvars := [lenSeg()          = ssLength(),
          kappa(zeta)       = curvature(zeta),
          theta(zeta)       = angle(zeta),
          xPath(zeta)       = x(zeta),
          yPath(zeta)       = y(zeta),
          xTraj(zeta,tt)    = x(zeta,tt),
          yTraj(zeta,tt)    = y(zeta,tt),
          xLimitLeft(zeta,pf_error)   = x(zeta,pf_error),
          yLimitLeft(zeta,pf_error)   = y(zeta,pf_error),
          xLimitRight(zeta,pf_error) = x(zeta,pf_error),
          yLimitRight(zeta,pf_error) = y(zeta,pf_error),
          nominalFeed()     = feedReferenceRate()]:  
mapUserFunctionToObject(qvars,
                        "*pToolPath2D",            # istanza class tipo pointer
                        "Mechatronix#ToolPath2D",  # classe (deve essere registrata)
                        ["segments"=path]); 
#infoRegisteredObjects();
# percorso Bosetti in mm
# Generation of optimal control equations and C++ code
# General "jump" conditions (i.e. what happens on path nodes)
DX := subs(theta(s(t))=theta_L(zeta_L),SL*Tdir[1] + NL*Ndir[1]) ;
DY := subs(theta(s(t))=theta_L(zeta_L),SL*Tdir[2] + NL*Ndir[2]) ;
EQJUMP1 := SR=combine(collect(subs(theta(s(t))=theta_R(zeta_R),
                      DX*Tdir[1]+DY*Tdir[2]),{SL,NL})) ;
EQJUMP2 := NR=combine(collect(subs(theta(s(t))=theta_R(zeta_R),
                      DX*Ndir[1]+DY*Ndir[2]),{SL,NL})) ;
jump_VEL := subs(SR=vs(zeta_R),NR=vn(zeta_R),
                 SL=vs(zeta_L),NL=vn(zeta_L),
                 [EQJUMP1,EQJUMP2]) ;
jump_ACC := subs(SR=as(zeta_R),NR=an(zeta_R),
                 SL=as(zeta_L),NL=an(zeta_L),
                 [EQJUMP1,EQJUMP2]) ;
#Describe(setJumpConditionFreeLeft);
#Describe(setJumpConditionAlgebraic) ;
jump_VEL;
setInterfaceConditionFree(coV);
setInterfaceConditionFixed(s,s(zeta_L)-zeta_L,s(zeta_R)-zeta_R);
setInterfaceConditionFixed(n,n(zeta_L)-0,n(zeta_R)-0);
setInterfaceConditionAlgebraic(jump_VEL);
setInterfaceConditionAlgebraic(jump_ACC);
# Select finite difference scheme
# Define the finite difference scheme for each single equations.
# Note that the finite different scheme is associated to the i-th equation (of the dynamical system or of the adjoint equations) and not necessarily to the state variables or lagrange multipliers.
Describe(setFDorder);
# Upwind setting
#setFDorderEquations([5,6],"backward"):
#setFDorderCoEquation([as,an],"forward"):
# 
# Set guess solution (optional)
# A guess solution can be specified for some or all state variables. The guess solution can be a function of the independent variable "zeta". Piecewise solution are not allowed.
# Note that the lambda3 multiplier cannot vanish, otherwise the corresponding control goes to infinity.
guess_list := [ s   = zeta,
                n   = 0,
                vs  = nominalFeed(),
                vn  = 0,
                as  = 0,
                an  = 0,
                coV = 1/nominalFeed() ] ;
# Explicit controls
# The command tries to solve explicitly the set of equations given by the derivative of the hamiltonian with respect to the control vector.
# If a solution is found, the explicit controls are formally substituted and eliminated from the equations. This produce a faster code.
# If it is not possible to find and explicit solution, then "u_iterative = true" flag must be activated in the code generation part for solving numerically the equantions of the controls.
# Note: the explicit solution of the controls fails when the output also contains  the control variables.
# Set default parameters (optional)
# It is possible to define the default values for all parameters that appear in the full set of equations of the optimal control problem.
# This is an optional command that the user may need if he wish to autonomously produce an input data file. 
# The command can called more than one with different arguments, which will be added to a global list.
dataOCP := [ as_max = 2.1,   #m/s^2 
             an_max = 1.2,   #m/s^2
             ax_max = 2.1,   #m/s^2 
             ay_max = 2.1,   #m/s^2
             v_nom  = 0.173, #m/s
             deltaFeed = v_nom,
             n_i    = 0,
             #u_i    = 0,
             #v_i    = 0,
             vs_i   = 0,
             vn_i   = 0,
             as_i   = 0,
             an_i   = 0,
             n_f    = 0,
             #u_f    = 0,
             #v_f    = 0,
             vs_f   = 0,
             vn_f   = 0,
             as_f   = 0,
             an_f   = 0,
             js_min = -50,
             js_max = 30,
             jn_max = 65,
             mesh_segments = 100,
             path_following_tolerance = 10e-6 ] ;
# Post process variables
# Add standard post-process variables in the output of the numerical solver: state variables, lagrange multipliers, controls, penalties and mesh variables.
post_int_list := [ [coV(zeta),"time"] ] ;
post_list := [[sqrt(vs(zeta)^2+vn(zeta)^2),"feed"],
              [sqrt(as(zeta)^2+an(zeta)^2),"acc"],
              [sqrt(js(zeta)^2+jn(zeta)^2),"jerk"],
              [VX,"vx"],
              [VY,"vy"],
              [AX,"ax"],
              [AY,"ay"],
              [JX,"jx"],
              [JY,"jy"],
              #[VX*60000,"vx_mm_min"],
              #[VY*60000,"vy_mm_min"],
              #[AX/ax_max,"ax_normalized"],
              #[AY/ay_max,"ay_normalized"],
              #[xPath(s(zeta))*1000,"X-path [mm]"],
              #[yPath(s(zeta))*1000,"Y-path [mm]"],
              [xPath(s(zeta)),"X-path"],
              [yPath(s(zeta)),"Y-path"],
              [xTraj(s(zeta),n(zeta)),"X-traj"],
              [yTraj(s(zeta),n(zeta)),"Y-traj"],
              [xLimitLeft(s(zeta)),"X-left"],
              [yLimitLeft(s(zeta)),"Y-left"],
              [xLimitRight(s(zeta)),"X-right"],
              [yLimitRight(s(zeta)),"Y-right"] ] ;
# Generate Optimal Control Equations
# The command genereates the equations of the necessary optimality conditions by approximating Pontriagyn Principle with the penalty functions.
# The jacobians of the optimality equations are also derived for numerical solution with Newton Solver.
Describe(generateOCProblem):
generateOCProblem("CNOC", 
                  integral_post_processing  = post_int_list,
                  post_processing           = post_list,
                  parameters                = dataOCP,
                  #controls_guess           = [js=0,jn=0],
                  states_guess              = guess_list,
                  clean                     = false); 


