# 
#            
# Brachiostocrona
# Inizializzazione
restart:
with(XOptima):
#XOptimaInfo() ;
# Equazioni del modello matematico del veicolo
EQ1    :=      diff(x(zeta),zeta)     =   T(zeta)*v(zeta)*sin(theta(zeta)):
EQ2    :=      diff(y(zeta),zeta)     = - T(zeta)*v(zeta)*cos(theta(zeta)):
EQ3    := mass*diff(v(zeta),zeta)     =  T(zeta)*g*cos(theta(zeta)):
EQ4    :=      diff(T(zeta),zeta)     = 0 :
EQ5    :=      diff(theta(zeta),zeta) = vtheta(zeta):
EQNS_T := [ EQ||(1..5) ]: <%> ;
# Variabili del problema e controlli
# Variabili
qvars := [x(zeta),y(zeta),v(zeta),T(zeta),theta(zeta)] ;
# Controlli
cvars := [vtheta(zeta)] ;
# OCP
#infoRegisteredObjects() ;
loadDynamicSystem(equations=EQNS_T,controls=cvars,states=qvars) ;
# Inserisce condizioni al contorno
addBoundaryConditions(initial=[x=0,y=0,v=0],final=[x=xf,y=yf]);
infoBoundaryConditions() ;
# Penalty
addControlBound( vtheta,
                 scale       = T(zeta),
                 controlType = "U_QUADRATIC",
                 maxabs      = 10,
                 epsilon     = 0.001,
                 tolerance   = 0.001 ) ;
addUnilateralConstraint( T(zeta) > 0,
                         TimePositive,
                         scale     = 1,
                         epsilon   = 0.1,
                         tolerance = 0.01 ) ;
# Generazione del problema di controllo ottimo
setFDorderEquations([5],"backward"):
setFDorderCoEquation([theta],"forward"):
# Post processing functions
setTarget( mayer = T(zeta_f) ) ;

# Calcolo tempo e velocit√† lungo piano inclinato
LEN  := evalf(sqrt(xf^2+yf^2)):
TIME := evalf(sqrt(-2*yf/g)) ; subs(g=9.81,%);
VF   := evalf(LEN/TIME) ; subs(g=9.81,%);
generateOCProblem( "Brachiostocrona", 
                   post_processing = [[T(zeta),"minTime"]],
                   parameters = [ mass=1,
                                  xf = 10,
                                  yf = -3,
                                  Vf = VF,
                                  Tf = TIME,
                                  g  = 9.81 ],
                     mesh         = [length=1,n=500],
                     states_guess = [x=zeta*xf,
                                     y=-zeta*yf,
                                     v=Vf,
                                     T=Tf]) ;

