# 
# XOPTIMA  Automatic Code Generation for Optimal Control Problems 
# 
# Go Kart model
# Authors: Roberto Lot
# Date: 12th February 2014
# 
# Minimum Time with XOptima
restart:interface(rtablesize=30): 
# Load model
read("linearTire.mpl");
read("SuperKart.mpl"):
vehicle_data;
fo_vars; u_vars; #<fo_eqns>;
T_r := t -> m*g*as(t)*r_r; # redefine axle torque
# Input equations
eq_js := diff(as(t),t) - js(t);              # longitudinal jerk
  
eq_delta := diff(delta(t),t) - delta_dot(t); # steer rate
# Time domain equations
tvars := [op(fo_vars), as(t),delta(t)]:  nops(tvars), tvars;   # state variables
uvars := [js(t), delta_dot(t)]:           nops(uvars), uvars;    # control inputs
teqns := [op(fo_eqns), eq_js, eq_delta]: #<teqns>;  # model equations
# Change the Independent Variable from <Time> to <Space>
# It is assumed that
if tvars[1] <> s(t) then ERROR ("first state variable must be s(t)") end if;
# Define svars (space domain) from tvars (time domain)
zvars := [op(subs(t=zeta, tvars[2..nops(tvars)]))];
SS :=diff(s(t),t)=zeta_dot(zeta), seq( diff(tvars[i+1],t) = diff(zvars[i],zeta)*zeta_dot(zeta), i=1..nops(zvars)),
     s(t)=zeta,  t=zeta: #<SS>;
#<diff(tvars,t)> = <subs(SS,diff(tvars,t))>;
# Model equations in the space domain
aeqn  := subs(SS,teqns[1]);
zeta_dot := unapply(solve(aeqn, zeta_dot(zeta)),zeta);
zeqns := subs(SS,teqns[2..-1]):
#for i from 1 to nops(zeqns) do zeqns[i] := simplify( denom(rhs(op(aeqn))) * zeqns[i], size): end: 
uvars := subs(t=zeta, uvars):
#zvars;uvars;<zeqns>;
# Formulation of the Minimum Time Problem  with XOptima 
with(XOptima):  #Describe(XOptima):
# Load dynamic system
resetXOptima();
#Describe(loadDynamicSystem);
loadDynamicSystem(
   states    = zvars, 
   controls  = uvars, 
   equations = zeqns,
   meshFunctions=[Theta(zeta)]
);
# Since we have change domain the integrand have to be scaled with the following:
ocp_scale := 1; #1/zeta_dot(zeta)
# Define the  Target
setTarget( lagrange = 1/zeta_dot(zeta) + wn*n(zeta)^2 ) ;  # Minimum Time
# State variables Constraints are converted into penalty terms
use_barriers := false:
constraints_opts := barrier=use_barriers, scale=ocp_scale, epsilon=0.01, tolerance=0.05;
ACC := as(zeta)^2 + (u(zeta)*Omega(zeta))^2 / (friction*g)^2 < 1;
addUnilateralConstraint(ACC, AccelerationEllipse, constraints_opts);
# Rear Tire slips
lambda_r := subs(t=zeta, (lambda_rr + lambda_rl)/2):
kappa_r  := subs(t=zeta, (kappa_rr  + kappa_rl )/2): 
RTS :=  (lambda_r/lambda_max)^2 + (kappa_r/kappa_max) ^ 2 < 1;
addUnilateralConstraint(RTS, RearTireSlips, constraints_opts);
# Rear Tire Adherence
#RTA := (Fr(zeta)^2+Sr(zeta)^2) / (M*g)^2 < muR;
#addUnilateralConstraint(RTA, RearTireAdherence, constraints_opts );
# Front Tire slips
lambda_f := subs(t=zeta, (lambda_fr + lambda_fl)/2):
kappa_f  := 0; 
FTS :=  (lambda_f/lambda_max)^2 + (kappa_f/kappa_max) ^ 2 < 1;
addUnilateralConstraint(FTS, FrontTireSlips, constraints_opts);
# Front Tire Adherence
#FTA := (Ff(zeta)^2+Sf(zeta)^2) / (M*g)^2 <= muF;
#addUnilateralConstraint(FTA, FrontTireAdherence, constraints_opts);
# Road boundaries constraints
# Left border
addUnilateralConstraint(n(zeta)>-left_width(zeta), RoadLeftBorder, constraints_opts);
# Right border
addUnilateralConstraint(n(zeta)<right_width(zeta), RoadRightBorder, constraints_opts);
# Engine and power limit
# used to prevent to move towards small (or even negative) speeds during iterations
addUnilateralConstraint( u(zeta) > min_speed, minSpeed, constraints_opts):
#wPL := 0;
# Simple Power Limit (outdated)
PL := T_r(zeta)*omega_r(zeta) / Pmax < 1;
addUnilateralConstraint(PL, PowerLimit, constraints_opts, scale=wPL);
#wET := 1;
# Use Engine Torque map
omega_r(zeta);  # rear axle spin velocity
addUnilateralConstraint( T_r(zeta) <= maxTorque(omega_r(zeta)),
                         maxTorqueLimit, constraints_opts, scale=wET):
# XOptima built-in function for engine torque management
mapUserFunctionToObject(maxTorque(omegaR)=maxTorqueOnWheelHub(omegaR),
                        "*pEngine", 
                        "Mechatronix#Engine");
# Define engine characteristics
gr_data := [3, # primary ratio = engine [rpm] / primary shaft [rpm]
 
  2,  # 1st gear ratio
 
  1  #   2nd gear ratio

]:

# torque vs rpm table
rpm_data   := [1000,1500,2000,2500,3000,3500,4000,4500,5000,5500,6000,6500,7000,7500,8000,8500,9000,9500,10000]:
torque_data:= [  10,  47,  62,  70,  78,  84,  87,  90,  93,  93,  90,  87,  84,  80,  73,  63,  49,  29,   20]*0.5:

with(plots):
display([seq(pointplot(rpm_data/(gr_data[1]*gr_data[i]),torque_data*(gr_data[1]*gr_data[i]),connect=true),i=2..nops(gr_data))],gridlines=true, labels=["axle speed [rpm]","axle torque [Nm]"], labeldirections=[horizontal, vertical]);
# Use this to include Engine in data file (.rb or .lua)
setEngine( gearRatio=gr_data, 
           rpm=rpm_data, 
           torque=torque_data );
# Control inputs Constraints are converted into special penalty terms
addControlBound( js,        controlType="U_QUADRATIC", 
      maxabs=5, tolerance = 0.05, epsilon=0.01,scale=ocp_scale );
addControlBound( delta_dot, controlType="U_QUADRATIC", 
      maxabs=2, tolerance = 0.05, epsilon=0.01, scale=ocp_scale );
# Boundary conditions
# create boudary conditions for all state variables
addBoundaryConditions(initial=map2(op,0,zvars), final=map2(op,0,zvars));
# Activate BCs
#setStatusBoundaryConditions(final=[V="disabled"]);  # activate selected BCs
setStatusBoundaryConditions(final=[seq(op(0,zvars[i])="disabled",i=3..nops(zvars))]);
infoBoundaryConditions();
# default values for BCs
BC_values := []: 
BC_values := [u_i=u0, u_f=u0, omega_r_i = u0/r_r, omega_r_f = u0/r_r ];

# merge BCS
BC_zero := [seq( cat(op(0,zvars[i]),_i)=0, i=1..nops(zvars)) , seq( cat(op(0,zvars[i]),_f)=0, i=1..nops(zvars))]:
all_BC := BC_values:
for i from 1 to nops(BC_zero) do
    if not(has(BC_values , lhs(BC_zero[i]))) then all_BC := [op(all_BC),BC_zero[i]]: end if: 
end: #all_BC;
# Road model
# Link the curvature fucntion to the Road object
mapUserFunctionToObject( [
  Theta(zeta)=saeCurvature(zeta),
  left_width(zeta) =  leftWidth(zeta),
  right_width(zeta) = rightWidth(zeta),
  xR(zeta) =saeX(zeta),                 yR(zeta)=saeY(zeta),
  xRL(zeta)=saeLeftX(zeta),             yRL(zeta)=saeLeftY(zeta),
  xRR(zeta)=saeRightX(zeta),            yRR(zeta)=saeRightY(zeta),
  xV(zeta,n(zeta))=saeX(zeta,n(zeta)),  yV(zeta,n(zeta))=saeY(zeta,n(zeta))
], "*pRoad", "Mechatronix#Road2D");
# initialize the Road 
initRoad(roadWidth=4,theta0=0,is_SAE=true);
addRoadSegment(length=10,gridSize=0.1);  # add a straight segment (it is recommended to reduce mesh size at borders)
addRoadSegment(length=Pi*50,radius=50,gridSize=1); # add a circular segment
addRoadSegment(length=60,gridSize=0.5);   # add a straight segment
addRoadSegment(length=10,gridSize=0.1);   # add a straight segment (it is recommended to reduce mesh size at borders)
# 

#Describe(mapUserFunctionToRegularized);
#mapUserFunctionToRegularized(nReg, "NegativePartRegularizedWithSinAtan", [h=0.01]);
mapUserFunctionToRegularized(posReg, "PositivePartRegularizedWithSinAtan", [h=0.01]);
T_r(zeta);
zvars;
out_vars := [
   # engine

   [T_r(zeta),  "UsedTorque"], 
   [maxTorque(omega_r(zeta)), "MaxTorque"],
   # tire forces
 
   [N_rr/(m*g),"n_rr"],[N_rl/(m*g),"n_rl"],[N_fr/(m*g),"n_fr"],[N_fl/(m*g),"n_fl"],
   [F_rr/(m*g),"f_rr"],[F_rl/(m*g),"f_rl"],[F_fr/(m*g),"f_fr"],[F_fl/(m*g),"f_fl"],
   [S_rr/(m*g),"s_rr"],[S_rl/(m*g),"s_rl"],
    # tire slips

   [lambda_r,"lambda_r"],[lambda_f,"lambda_f"],[kappa_r,"kappa_r"],
   # road and trajectory
 
  [xR(zeta),"xR"],   [yR(zeta),"yR"],
  [xRL(zeta),"xRL"], [yRL(zeta),"yRL"],
  [xRR(zeta),"xRR"], [yRR(zeta),"yRR"],
  [xV(zeta,n(zeta)),"xV"], [yV(zeta,n(zeta)),"yV"]]: 
out_vars := subs(t=zeta, out_vars): #<%>;
# Generate the OCP equations and C++ code
#Describe(generateOCProblem);
# Continuation
cont := [
   [wn = s*wn_max] # first continuation
   # second continuation
   #[epsi = (1-s)*epsi0+s*epsi1, [jxr,"epsilon"] = epsi, [tau_dot,"epsilon"] = epsi]
];
generateOCProblem( "SuperKartOCP", #output_directory = "../SuperKart-FreeTrajectory",
     parameters = [ op(vehicle_data),
                    u0 = 10, op(all_BC),
                    wn=0, # quadratic penalty on the lateral position

                    friction = 1,
                    kappa_max = 0.05, lambda_max = 0.1,
                    min_speed = 5,
                    wET = 1,  # Engine Torque limit (enabled)
            
                    Pmax = 200e3, wPL=0     #  Power Limit (disabled)
 
                   ],
     states_guess = [u=u0, omega_r=u0/r_r],
     #continuation = cont, 
     post_processing = out_vars,
     integral_post_processing = [[1/zeta_dot(zeta),"time"]],                   
     language="C++" #,excluded = ["SuperKartOCP_Data.rb"] "SuperKartOCP_Data.lua", 
) ;

# 
# 
