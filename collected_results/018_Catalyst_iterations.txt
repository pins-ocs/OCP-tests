Boundary Conditions activation status
[xx] = activated, [  ] = NOT activated

[ 0] initial_x1
[ 1] initial_x2



Controls
uControl = {
  type    = COSINE LOGARITHMIC BARRIER,
  epsilon = 1e-05,
  size    = 1e-05
}

User class (pointer)

User function `pMesh`
BEGIN Mesh[mesh]
num. segments = 1
num. nodes = 401
Segment N.0: s0 = 0.000 length = 1.000 npts = 401 no data set
END Mesh[mesh]

Model Parameters
....................................x1_i = 1
....................................x2_i = 0
INFO CLASS = Catalyst
  #nodes      = 401
  dim         = u = 1, q = 1, x = 2, p = 0, omega = 2, bc = 2, full_bc = 6
  BC          = Inital = 4, Final = 2, Cyclic = 0
  OMEGA       = Inital = 2, Final = 0, Cyclic = 0
  total       = nZ = 1606, UC = 400, Q = 401
  index start = omega = 1604, p = 1606
  FD jacobian = ANALYTIC
END INFO
Solver Master System: CyclicReduction+LU and LastBlock LUPQ
Solver Controls:      Newton
Jacobian evaluation:  Analitic Jacobian
Initializer Controls: Quasi-Newton
Used threads:         15


NewtonDumped --- start iterations ---
[iter, Dumping] (|f0|_1,|f1|_1) [|d0|_1,|d1|_1] lambda
[  1,14] ( 0.00187  , 0.00240  ) [  634.0   ,  634.0   ] 0.000393   [solverNewtonDumped]
[  2, 3] ( 0.00240  , 0.00299  ) [   38.8   ,   38.5   ] 0.00456    [solverNewtonDumped]
[  3, 1] ( 0.00299  , 0.00259  ) [  0.808   ,  0.702   ] 0.135      [solverNewtonDumped]
[  4, 1] ( 0.00259  , 0.000741 ) [  0.717   ,  0.189   ] 0.735      [solverNewtonDumped]
[  5, 3] ( 0.000741 , 0.000703 ) [  0.185   ,  0.113   ] 0.384      [solverNewtonDumped]
[  6, 2] ( 0.000703 , 0.000971 ) [  0.104   ,  0.0707  ] 0.512      [solverNewtonDumped]
[  7, 3] ( 0.000971 , 0.000667 ) [  0.0580  ,  0.0407  ] 0.260      [solverNewtonDumped]
[  8, 4] ( 0.000667 , 0.000609 ) [  0.0406  ,  0.0371  ] 0.0870     [solverNewtonDumped]
[  9, 5] ( 0.000609 , 0.000596 ) [  0.0376  ,  0.0368  ] 0.0224     [solverNewtonDumped]
[ 10, 5] ( 0.000596 , 0.000658 ) [  0.0398  ,  0.0447  ] 0.0114     [solverNewtonDumped]
[ 11, 1] ( 0.000658 , 0.000784 ) [  0.0569  ,  0.0506  ] 0.213      [solverNewtonDumped]
[ 12, 1] ( 0.000784 , 0.000647 ) [  0.0506  ,  0.0277  ] 0.924      [solverNewtonDumped]
[ 13, 4] ( 0.000647 , 0.000808 ) [  0.0701  ,  0.0307  ] 0.0661     [solverNewtonDumped]
[ 14, 3] ( 0.000808 , 0.000939 ) [  0.0319  ,  0.0288  ] 0.112      [solverNewtonDumped]
[ 15, 1] ( 0.000939 , 0.000510 ) [  0.0238  ,  0.0178  ] 0.669      [solverNewtonDumped]
[ 16, 5] ( 0.000510 , 0.000689 ) [  0.0568  ,  0.0203  ] 0.0539     [solverNewtonDumped]
[ 17, 1] ( 0.000689 , 0.000595 ) [  0.0181  ,  0.0173  ] 0.464      [solverNewtonDumped]
[ 18, 2] ( 0.000595 , 0.000488 ) [  0.0165  ,  0.0119  ] 0.200      [solverNewtonDumped]
[ 19, 3] ( 0.000488 , 0.000439 ) [  0.0192  , 0.00626  ] 0.103      [solverNewtonDumped]
[ 20, 2] ( 0.000439 , 0.000372 ) [ 0.00475  , 0.00506  ] 0.128      [solverNewtonDumped]
[iter, Dumping] (|f0|_1,|f1|_1) [|d0|_1,|d1|_1] lambda
[ 21, 2] ( 0.000372 , 0.000361 ) [ 0.00495  , 0.00386  ] 0.143      [solverNewtonDumped]
[ 22, 2] ( 0.000361 , 0.000381 ) [ 0.00349  , 0.00350  ] 0.151      [solverNewtonDumped]
[ 23, 2] ( 0.000381 , 0.000273 ) [ 0.00323  , 0.00261  ] 0.160      [solverNewtonDumped]
[ 24, 2] ( 0.000273 , 0.000292 ) [ 0.00221  , 0.00257  ] 0.160      [solverNewtonDumped]
[ 25, 2] ( 0.000292 , 0.000229 ) [ 0.00223  , 0.00177  ] 0.160      [solverNewtonDumped]
[ 26, 2] ( 0.000229 , 0.000218 ) [ 0.00190  , 0.00173  ] 0.160      [solverNewtonDumped]
[ 27, 3] ( 0.000218 , 0.000216 ) [ 0.00182  , 0.00182  ] 0.0920     [solverNewtonDumped]
[ 28, 2] ( 0.000216 , 0.000195 ) [ 0.00163  , 0.00147  ] 0.121      [solverNewtonDumped]
[ 29, 2] ( 0.000195 , 0.000168 ) [ 0.00151  , 0.00130  ] 0.139      [solverNewtonDumped]
[ 30, 3] ( 0.000168 , 0.000158 ) [ 0.00178  , 0.00165  ] 0.104      [solverNewtonDumped]
[ 31, 6] ( 0.000158 , 0.000163 ) [ 0.00216  , 0.00246  ] 0.0141     [solverNewtonDumped]
[ 32, 2] ( 0.000163 , 0.000214 ) [ 0.00167  , 0.00173  ] 0.157      [solverNewtonDumped]
[ 33, 1] ( 0.000214 , 0.000318 ) [ 0.00137  , 0.000938 ] 0.792      [solverNewtonDumped]
[ 34, 2] ( 0.000318 , 0.000278 ) [ 0.00133  , 0.00115  ] 0.298      [solverNewtonDumped]
[ 35, 2] ( 0.000278 , 0.000206 ) [ 0.000695 , 0.000580 ] 0.292      [solverNewtonDumped]
[ 36, 2] ( 0.000206 , 0.000170 ) [ 0.000555 , 0.000554 ] 0.330      [solverNewtonDumped]
[ 37, 1] ( 0.000170 , 0.000173 ) [ 0.000280 , 0.000305 ] 1.00       [solverNewtonDumped]
[ 38, 1] ( 0.000173 , 0.000138 ) [ 0.000232 , 0.000300 ] 1.00       [solverNewtonDumped]
[ 39, 2] ( 0.000138 , 9.70e-05 ) [ 0.000303 , 0.000201 ] 0.404      [solverNewtonDumped]
[ 40, 2] ( 9.70e-05 , 5.17e-05 ) [ 0.000238 , 0.000152 ] 0.253      [solverNewtonDumped]
[iter, Dumping] (|f0|_1,|f1|_1) [|d0|_1,|d1|_1] lambda
[ 41, 2] ( 5.17e-05 , 4.26e-05 ) [ 0.000148 , 0.000117 ] 0.200      [solverNewtonDumped]
[ 42, 2] ( 4.26e-05 , 3.58e-05 ) [ 0.000107 , 8.52e-05 ] 0.179      [solverNewtonDumped]
[ 43, 2] ( 3.58e-05 , 2.93e-05 ) [ 7.67e-05 , 6.21e-05 ] 0.169      [solverNewtonDumped]
[ 44, 2] ( 2.93e-05 , 2.39e-05 ) [ 5.71e-05 , 4.82e-05 ] 0.165      [solverNewtonDumped]
[ 45, 2] ( 2.39e-05 , 1.91e-05 ) [ 5.56e-05 , 4.68e-05 ] 0.162      [solverNewtonDumped]
[ 46, 2] ( 1.91e-05 , 1.54e-05 ) [ 4.81e-05 , 4.07e-05 ] 0.161      [solverNewtonDumped]
[ 47, 2] ( 1.54e-05 , 1.24e-05 ) [ 4.39e-05 , 3.71e-05 ] 0.161      [solverNewtonDumped]
[ 48, 2] ( 1.24e-05 , 1.02e-05 ) [ 4.01e-05 , 3.42e-05 ] 0.160      [solverNewtonDumped]
[ 49, 1] ( 1.02e-05 , 3.69e-05 ) [ 3.91e-05 , 4.98e-05 ] 0.801      [solverNewtonDumped]
[ 50, 1] ( 3.69e-05 , 1.12e-05 ) [ 1.70e-05 , 6.01e-06 ] 1.00       [solverNewtonDumped]
[ 51, 2] ( 1.12e-05 , 8.92e-06 ) [ 1.50e-05 , 1.16e-05 ] 0.200      [solverNewtonDumped]
[ 52, 2] ( 8.92e-06 , 7.35e-06 ) [ 9.04e-06 , 7.27e-06 ] 0.179      [solverNewtonDumped]
[ 53, 2] ( 7.35e-06 , 6.09e-06 ) [ 6.17e-06 , 5.01e-06 ] 0.169      [solverNewtonDumped]
[ 54, 2] ( 6.09e-06 , 5.04e-06 ) [ 4.45e-06 , 3.66e-06 ] 0.165      [solverNewtonDumped]
[ 55, 2] ( 5.04e-06 , 4.16e-06 ) [ 3.05e-06 , 2.49e-06 ] 0.162      [solverNewtonDumped]
[ 56, 1] ( 4.16e-06 , 5.19e-06 ) [ 2.28e-06 , 6.03e-06 ] 0.806      [solverNewtonDumped]
[ 57, 1] ( 5.19e-06 , 7.41e-07 ) [ 1.70e-06 , 3.87e-07 ] 1.00       [solverNewtonDumped]
[ 58, 1] ( 7.41e-07 , 1.90e-08 ) [ 5.96e-07 , 3.12e-08 ] 1.00       [solverNewtonDumped]
[ 59, 1] ( 1.90e-08 , 4.47e-11 ) [ 3.30e-08 , 3.02e-11 ] 1.00       [solverNewtonDumped]
[ 60, 1] ( 4.47e-11 , 3.65e-15 ) [ 3.02e-11 , 1.48e-15 ] 1.00       [solverNewtonDumped]

------------------------ STATISTIC -------------------------
Elapsed Time   = 40.4[ms]      timeout        = 0 [ms]
iteration      = 60            tolerance      = 1.000e-09 
max iterations = 300           N. Equations   = 1606
max acc. iter. = 800           N. System pars = 400
Converged      = YES           Memory Used    = 160Kb (+66bytes)
----------------------- CONTINUATION -----------------------
Initial Step   = 0.2           Minimum Step   = 0.001     
Reduce Factor  = 0.5           Augment Factor = 1.5       
Few iterations = 8         
----------------------- EVALUATIONS ------------------------
Function       = 141           Jacobian       = 60        
Factorization  = 60            Inversion      = 200       
------------------------ USER INFO -------------------------
last ||d||_inf = 3.6880e-14    last||d1||_inf = 9.6711e-09
last ||f||_inf = 1.6864e-13    last||f||_1    = 3.6548e-15
------------------------------------------------------------
              __   __             ___  __   __   ___  __              
             /  ` /  \ |\ | \  / |__  |__) / _` |__  |  \             
             \__, \__/ | \|  \/  |___ |  \ \__> |___ |__/             
                                                                      
Check Jacobian Begin
#ERR 1 Jacobian block N. 50 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  3,  1] =     -0.14601 / -0.14619     [A/FD] ---   0.00017312 / 0.11843      [err/err(%)]
jac[  3,  5] =     -0.14601 / -0.14619     [A/FD] ---   0.00017312 / 0.11843      [err/err(%)]

#ERR 2 Jacobian block N. 51 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  0,  1] =    -0.049244 / -0.049375    [A/FD] ---   0.00013118 / 0.26568      [err/err(%)]
jac[  1,  1] =     -0.94031 / -0.94014     [A/FD] ---   0.00016848 / 0.017918     [err/err(%)]
jac[  2,  1] =     0.032460 / 0.032576     [A/FD] ---   0.00011588 / 0.35574      [err/err(%)]
jac[  3,  1] =     -0.43875 / -0.44032     [A/FD] ---    0.0015664 / 0.35574      [err/err(%)]
jac[  0,  5] =    -0.049244 / -0.049375    [A/FD] ---   0.00013118 / 0.26568      [err/err(%)]
jac[  1,  5] =       1.0597 / 1.0599       [A/FD] ---   0.00016848 / 0.015896     [err/err(%)]
jac[  2,  5] =     0.032460 / 0.032576     [A/FD] ---   0.00011588 / 0.35574      [err/err(%)]
jac[  3,  5] =     -0.43875 / -0.44032     [A/FD] ---    0.0015664 / 0.35574      [err/err(%)]

#ERR 3 Jacobian block N. 52 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  0,  1] =     -0.16159 / -0.16387     [A/FD] ---    0.0022808 / 1.3918       [err/err(%)]
jac[  1,  1] =     -0.79453 / -0.79158     [A/FD] ---    0.0029520 / 0.37154      [err/err(%)]
jac[  2,  1] =      0.13892 / 0.14104      [A/FD] ---    0.0021252 / 1.5067       [err/err(%)]
jac[  3,  1] =      -1.8613 / -1.8897      [A/FD] ---     0.028473 / 1.5067       [err/err(%)]
jac[  0,  5] =     -0.16159 / -0.16387     [A/FD] ---    0.0022808 / 1.3918       [err/err(%)]
jac[  1,  5] =       1.2055 / 1.2084       [A/FD] ---    0.0029520 / 0.24428      [err/err(%)]
jac[  2,  5] =      0.13892 / 0.14104      [A/FD] ---    0.0021252 / 1.5067       [err/err(%)]
jac[  3,  5] =      -1.8613 / -1.8897      [A/FD] ---     0.028473 / 1.5067       [err/err(%)]

#ERR 4 Jacobian block N. 53 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  3,  0] =       1.0791 / 1.0798       [A/FD] ---   0.00070073 / 0.064894     [err/err(%)]
jac[  0,  1] =      -1.1112 / -1.2530      [A/FD] ---      0.14179 / 11.316       [err/err(%)]
jac[  1,  1] =      0.44566 / 0.63062      [A/FD] ---      0.18495 / 29.329       [err/err(%)]
jac[  2,  1] =       1.0791 / 1.2184       [A/FD] ---      0.13926 / 11.430       [err/err(%)]
jac[  3,  1] =      -14.336 / -16.186      [A/FD] ---       1.8501 / 11.430       [err/err(%)]
jac[  3,  2] =       1.1112 / 1.1119       [A/FD] ---   0.00074016 / 0.066565     [err/err(%)]
jac[  0,  3] =     -0.10991 / -0.11003     [A/FD] ---   0.00012601 / 0.11452      [err/err(%)]
jac[  1,  3] =      0.14335 / 0.14351      [A/FD] ---   0.00016436 / 0.11452      [err/err(%)]
jac[  2,  3] =      0.10912 / 0.10924      [A/FD] ---   0.00012367 / 0.11321      [err/err(%)]
jac[  3,  3] =      -2.4457 / -2.4473      [A/FD] ---    0.0016432 / 0.067142     [err/err(%)]
jac[  3,  4] =       1.0791 / 1.0798       [A/FD] ---   0.00070073 / 0.064894     [err/err(%)]
jac[  0,  5] =      -1.1112 / -1.2530      [A/FD] ---      0.14179 / 11.316       [err/err(%)]
jac[  1,  5] =       2.4457 / 2.6306       [A/FD] ---      0.18495 / 7.0308       [err/err(%)]
jac[  2,  5] =       1.0791 / 1.2184       [A/FD] ---      0.13926 / 11.430       [err/err(%)]
jac[  3,  5] =      -14.336 / -16.186      [A/FD] ---       1.8501 / 11.430       [err/err(%)]
jac[  3,  6] =       1.1112 / 1.1119       [A/FD] ---   0.00074016 / 0.066565     [err/err(%)]
jac[  0,  7] =     -0.10991 / -0.11003     [A/FD] ---   0.00012601 / 0.11452      [err/err(%)]
jac[  1,  7] =      0.14335 / 0.14351      [A/FD] ---   0.00016436 / 0.11452      [err/err(%)]
jac[  2,  7] =      0.10912 / 0.10924      [A/FD] ---   0.00012367 / 0.11321      [err/err(%)]
jac[  3,  7] =     -0.44566 / -0.44731     [A/FD] ---    0.0016432 / 0.36735      [err/err(%)]

#ERR 5 Jacobian block N. 54 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  0,  0] =       2.5655 / 2.6016       [A/FD] ---     0.036108 / 1.3879       [err/err(%)]
jac[  1,  0] =      -4.6822 / -4.7297      [A/FD] ---     0.047422 / 1.0027       [err/err(%)]
jac[  2,  0] =      -3.6610 / -3.6981      [A/FD] ---     0.037091 / 1.0030       [err/err(%)]
jac[  3,  0] =       48.295 / 48.784       [A/FD] ---      0.48930 / 1.0030       [err/err(%)]
jac[  0,  1] =      -47.032 / -36.797      [A/FD] ---       10.235 / 21.762       [err/err(%)]
jac[  1,  1] =       60.764 / 47.324       [A/FD] ---       13.440 / 22.119       [err/err(%)]
jac[  2,  1] =       48.295 / 37.786       [A/FD] ---       10.509 / 21.760       [err/err(%)]
jac[  3,  1] =      -637.10 / -498.46      [A/FD] ---       138.63 / 21.760       [err/err(%)]
jac[  0,  2] =       3.4707 / 3.5040       [A/FD] ---     0.033365 / 0.95219      [err/err(%)]
jac[  1,  2] =      -4.5580 / -4.6018      [A/FD] ---     0.043818 / 0.95219      [err/err(%)]
jac[  2,  2] =      -4.5655 / -4.5998      [A/FD] ---     0.034262 / 0.74486      [err/err(%)]
jac[  3,  2] =       47.032 / 47.484       [A/FD] ---      0.45199 / 0.95188      [err/err(%)]
jac[  0,  3] =      -4.5580 / -4.6326      [A/FD] ---     0.074658 / 1.6116       [err/err(%)]
jac[  1,  3] =       5.9860 / 6.0840       [A/FD] ---     0.098047 / 1.6116       [err/err(%)]
jac[  2,  3] =       4.6822 / 4.7589       [A/FD] ---     0.076668 / 1.6110       [err/err(%)]
jac[  3,  3] =      -62.764 / -63.776      [A/FD] ---       1.0114 / 1.5859       [err/err(%)]
jac[  0,  4] =       4.5655 / 4.6016       [A/FD] ---     0.036108 / 0.78468      [err/err(%)]
jac[  1,  4] =      -4.6822 / -4.7297      [A/FD] ---     0.047422 / 1.0027       [err/err(%)]
jac[  2,  4] =      -3.6610 / -3.6981      [A/FD] ---     0.037091 / 1.0030       [err/err(%)]
jac[  3,  4] =       48.295 / 48.784       [A/FD] ---      0.48930 / 1.0030       [err/err(%)]
jac[  0,  5] =      -47.032 / -36.797      [A/FD] ---       10.235 / 21.762       [err/err(%)]
jac[  1,  5] =       62.764 / 49.324       [A/FD] ---       13.440 / 21.414       [err/err(%)]
jac[  2,  5] =       48.295 / 37.786       [A/FD] ---       10.509 / 21.760       [err/err(%)]
jac[  3,  5] =      -637.10 / -498.46      [A/FD] ---       138.63 / 21.760       [err/err(%)]
jac[  0,  6] =       3.4707 / 3.5040       [A/FD] ---     0.033365 / 0.95219      [err/err(%)]
jac[  1,  6] =      -4.5580 / -4.6018      [A/FD] ---     0.043818 / 0.95219      [err/err(%)]
jac[  2,  6] =      -2.5655 / -2.5998      [A/FD] ---     0.034262 / 1.3179       [err/err(%)]
jac[  3,  6] =       47.032 / 47.484       [A/FD] ---      0.45199 / 0.95188      [err/err(%)]
jac[  0,  7] =      -4.5580 / -4.6326      [A/FD] ---     0.074658 / 1.6116       [err/err(%)]
jac[  1,  7] =       5.9860 / 6.0840       [A/FD] ---     0.098047 / 1.6116       [err/err(%)]
jac[  2,  7] =       4.6822 / 4.7589       [A/FD] ---     0.076668 / 1.6110       [err/err(%)]
jac[  3,  7] =      -60.764 / -61.776      [A/FD] ---       1.0114 / 1.6373       [err/err(%)]

#ERR 6 Jacobian block N. 55 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  0,  0] =       1.1414 / 1.1651       [A/FD] ---     0.023689 / 2.0332       [err/err(%)]
jac[  1,  0] =      -2.8197 / -2.8509      [A/FD] ---     0.031192 / 1.0941       [err/err(%)]
jac[  2,  0] =      -2.2375 / -2.2623      [A/FD] ---     0.024751 / 1.0941       [err/err(%)]
jac[  3,  0] =       29.439 / 29.765       [A/FD] ---      0.32565 / 1.0941       [err/err(%)]
jac[  0,  1] =      -28.174 / -35.312      [A/FD] ---       7.1383 / 20.215       [err/err(%)]
jac[  1,  1] =       36.099 / 45.497       [A/FD] ---       9.3982 / 20.657       [err/err(%)]
jac[  2,  1] =       29.439 / 36.895       [A/FD] ---       7.4560 / 20.209       [err/err(%)]
jac[  3,  1] =      -387.33 / -485.43      [A/FD] ---       98.099 / 20.209       [err/err(%)]
jac[  0,  2] =       2.0490 / 2.0697       [A/FD] ---     0.020751 / 1.0026       [err/err(%)]
jac[  1,  2] =      -2.6981 / -2.7254      [A/FD] ---     0.027325 / 1.0026       [err/err(%)]
jac[  2,  2] =      -3.1414 / -3.1631      [A/FD] ---     0.021688 / 0.68565      [err/err(%)]
jac[  3,  2] =       28.174 / 28.459       [A/FD] ---      0.28534 / 1.0026       [err/err(%)]
jac[  0,  3] =      -2.6981 / -2.7455      [A/FD] ---     0.047465 / 1.7288       [err/err(%)]
jac[  1,  3] =       3.5528 / 3.6153       [A/FD] ---     0.062501 / 1.7288       [err/err(%)]
jac[  2,  3] =       2.8197 / 2.8693       [A/FD] ---     0.049606 / 1.7288       [err/err(%)]
jac[  3,  3] =      -38.099 / -38.752      [A/FD] ---      0.65264 / 1.6842       [err/err(%)]
jac[  0,  4] =       3.1414 / 3.1651       [A/FD] ---     0.023689 / 0.74844      [err/err(%)]
jac[  1,  4] =      -2.8197 / -2.8509      [A/FD] ---     0.031192 / 1.0941       [err/err(%)]
jac[  2,  4] =      -2.2375 / -2.2623      [A/FD] ---     0.024751 / 1.0941       [err/err(%)]
jac[  3,  4] =       29.439 / 29.765       [A/FD] ---      0.32565 / 1.0941       [err/err(%)]
jac[  0,  5] =      -28.174 / -35.312      [A/FD] ---       7.1383 / 20.215       [err/err(%)]
jac[  1,  5] =       38.099 / 47.497       [A/FD] ---       9.3982 / 19.787       [err/err(%)]
jac[  2,  5] =       29.439 / 36.895       [A/FD] ---       7.4560 / 20.209       [err/err(%)]
jac[  3,  5] =      -387.33 / -485.43      [A/FD] ---       98.099 / 20.209       [err/err(%)]
jac[  0,  6] =       2.0490 / 2.0697       [A/FD] ---     0.020751 / 1.0026       [err/err(%)]
jac[  1,  6] =      -2.6981 / -2.7254      [A/FD] ---     0.027325 / 1.0026       [err/err(%)]
jac[  2,  6] =      -1.1414 / -1.1631      [A/FD] ---     0.021688 / 1.8647       [err/err(%)]
jac[  3,  6] =       28.174 / 28.459       [A/FD] ---      0.28534 / 1.0026       [err/err(%)]
jac[  0,  7] =      -2.6981 / -2.7455      [A/FD] ---     0.047465 / 1.7288       [err/err(%)]
jac[  1,  7] =       3.5528 / 3.6153       [A/FD] ---     0.062501 / 1.7288       [err/err(%)]
jac[  2,  7] =       2.8197 / 2.8693       [A/FD] ---     0.049606 / 1.7288       [err/err(%)]
jac[  3,  7] =      -36.099 / -36.752      [A/FD] ---      0.65264 / 1.7758       [err/err(%)]

skipping...
Last block: OK
Check Jacobian End
target [Lagrange,Mayer]       = [ 0.000, -0.04806 ]
[Penalties/Barriers,Controls] = [ 0.000, 3.136e-06 ]
All Done Folks!
