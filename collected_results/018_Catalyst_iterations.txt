Boundary Conditions activation status
[xx] = activated, [  ] = NOT activated

[ 0] initial_x1
[ 1] initial_x2



Controls
uControl = {
  type    = COSINE LOGARITHMIC BARRIER,
  epsilon = 1e-05,
  size    = 1e-05
}

User class (pointer)

User function `pMesh`
BEGIN Mesh[mesh]
num. segments = 1
num. nodes = 401
Segment N.0: s0 = 0.000 length = 1.000 npts = 401 no data set
END Mesh[mesh]

Model Parameters
....................................x1_i = 1
....................................x2_i = 0
INFO CLASS = Catalyst
  #nodes      = 401
  dim         = u = 1, q = 1, x = 2, p = 0, omega = 2, bc = 2, full_bc = 6
  BC          = Inital = 4, Final = 2, Cyclic = 0
  OMEGA       = Inital = 2, Final = 0, Cyclic = 0
  total       = nZ = 1606, UC = 400, Q = 401
  index start = omega = 1604, p = 1606
  FD jacobian = ANALYTIC
END INFO
Solver Master System: CyclicReduction+LU and LastBlock LUPQ
Solver Controls:      Newton
Jacobian evaluation:  Analitic Jacobian
Initializer Controls: Quasi-Newton
Used threads:         15


NewtonDumped --- start iterations ---
[iter, Dumping] (|f0|_1,|f1|_1) [|d0|_1,|d1|_1] lambda [Angle:Armijo:f_2:d_2:f_1:d_1:bad] solverNewtonDumped
[  1,10] ( 0.00187  , 0.00201  ) [  634.0   ,  634.0   ] 0.000262   [0:0:6:0:3:0:0]
[  2, 8] ( 0.00201  , 0.00261  ) [   73.5   ,   73.1   ] 0.00238    [2:0:3:0:2:0:0]
[  3, 1] ( 0.00261  , 0.00140  ) [  0.485   ,  0.212   ] 1.00       [0:0:0:0:0:0:0]
[  4, 2] ( 0.00140  , 0.00191  ) [  0.325   ,  0.276   ] 0.900      [0:0:0:1:0:0:0]
[  5, 9] ( 0.00191  , 0.00136  ) [  0.164   ,  0.114   ] 0.191      [2:0:6:0:0:0:0]
[  6, 2] ( 0.00136  , 0.00113  ) [  0.0439  ,  0.0415  ] 0.900      [1:0:0:0:0:0:0]
[  7, 3] ( 0.00113  , 0.00137  ) [  0.0455  ,  0.0691  ] 0.230      [2:0:0:0:0:0:0]
[  8, 2] ( 0.00137  , 0.000696 ) [  0.0325  ,  0.0271  ] 0.742      [1:0:0:0:0:0:0]
[  9, 4] ( 0.000696 , 0.000643 ) [  0.0784  ,  0.0653  ] 0.0640     [3:0:0:0:0:0:0]
[ 10,17] ( 0.000643 , 0.000585 ) [  0.0685  ,  0.0545  ] 0.185      [0:0:16:0:0:0:0]
[ 11, 4] ( 0.000585 , 0.000551 ) [  0.0597  ,  0.0551  ] 0.0640     [3:0:0:0:0:0:0]
[ 12, 3] ( 0.000551 , 0.000595 ) [  0.0393  ,  0.0168  ] 0.160      [2:0:0:0:0:0:0]
[ 13, 6] ( 0.000595 , 0.000604 ) [  0.0266  ,  0.0263  ] 0.0111     [2:2:0:1:0:0:0]
[ 14, 5] ( 0.000604 , 0.000622 ) [  0.0280  ,  0.0268  ] 0.0256     [2:1:0:1:0:0:0]
[ 15, 4] ( 0.000622 , 0.000647 ) [  0.0208  ,  0.0197  ] 0.0640     [1:0:1:1:0:0:0]
[ 16, 5] ( 0.000647 , 0.000660 ) [  0.0257  ,  0.0243  ] 0.0296     [2:2:0:0:0:0:0]
[ 17, 3] ( 0.000660 , 0.000829 ) [  0.0238  ,  0.0186  ] 0.160      [2:0:0:0:0:0:0]
[ 18, 3] ( 0.000829 , 0.000510 ) [  0.0164  , 0.00906  ] 0.360      [2:0:0:0:0:0:0]
[ 19, 4] ( 0.000510 , 0.000501 ) [  0.0104  , 0.00859  ] 0.0640     [3:0:0:0:0:0:0]
[ 20, 4] ( 0.000501 , 0.000523 ) [ 0.00774  , 0.00658  ] 0.0640     [1:0:1:1:0:0:0]
[iter, Dumping] (|f0|_1,|f1|_1) [|d0|_1,|d1|_1] lambda [Angle:Armijo:f_2:d_2:f_1:d_1:bad] solverNewtonDumped
[ 21, 2] ( 0.000523 , 0.000514 ) [ 0.00622  , 0.00499  ] 0.400      [1:0:0:0:0:0:0]
[ 22, 4] ( 0.000514 , 0.000467 ) [ 0.00529  , 0.00491  ] 0.0640     [2:1:0:0:0:0:0]
[ 23, 3] ( 0.000467 , 0.000534 ) [ 0.00512  , 0.00501  ] 0.160      [0:0:2:0:0:0:0]
[ 24, 4] ( 0.000534 , 0.000412 ) [ 0.00276  , 0.00251  ] 0.0640     [1:0:0:2:0:0:0]
[ 25, 3] ( 0.000412 , 0.000391 ) [ 0.00264  , 0.00242  ] 0.160      [0:0:1:1:0:0:0]
[ 26, 3] ( 0.000391 , 0.000379 ) [ 0.00289  , 0.00254  ] 0.256      [0:0:2:0:0:0:0]
[ 27, 3] ( 0.000379 , 0.000294 ) [ 0.00234  , 0.00196  ] 0.160      [0:0:1:1:0:0:0]
[ 28, 3] ( 0.000294 , 0.000277 ) [ 0.00230  , 0.00230  ] 0.160      [0:0:2:0:0:0:0]
[ 29, 2] ( 0.000277 , 0.000273 ) [ 0.00174  , 0.00142  ] 0.400      [0:0:1:0:0:0:0]
[ 30, 2] ( 0.000273 , 0.000330 ) [ 0.00168  , 0.00142  ] 0.400      [0:0:0:1:0:0:0]
[ 31, 1] ( 0.000330 , 0.000359 ) [ 0.00120  , 0.000910 ] 1.00       [0:0:0:0:0:0:0]
[ 32, 2] ( 0.000359 , 0.000312 ) [ 0.00163  , 0.00102  ] 0.400      [1:0:0:0:0:0:0]
[ 33, 3] ( 0.000312 , 0.000224 ) [ 0.000906 , 0.000683 ] 0.284      [1:0:0:1:0:0:0]
[ 34, 2] ( 0.000224 , 0.000181 ) [ 0.000516 , 0.000516 ] 0.400      [0:0:1:0:0:0:0]
[ 35, 2] ( 0.000181 , 0.000113 ) [ 0.000258 , 0.000266 ] 0.400      [1:0:0:0:0:0:0]
[ 36, 2] ( 0.000113 , 6.50e-05 ) [ 0.000180 , 0.000109 ] 0.400      [0:0:1:0:0:0:0]
[ 37, 2] ( 6.50e-05 , 4.01e-05 ) [ 0.000116 , 7.04e-05 ] 0.400      [0:0:1:0:0:0:0]
[ 38, 2] ( 4.01e-05 , 2.25e-05 ) [ 6.68e-05 , 4.00e-05 ] 0.400      [0:0:1:0:0:0:0]
[ 39, 1] ( 2.25e-05 , 1.58e-05 ) [ 4.10e-05 , 1.26e-05 ] 1.00       [0:0:0:0:0:0:0]
[ 40, 1] ( 1.58e-05 , 2.55e-06 ) [ 5.09e-06 , 1.25e-06 ] 1.00       [0:0:0:0:0:0:0]
[iter, Dumping] (|f0|_1,|f1|_1) [|d0|_1,|d1|_1] lambda [Angle:Armijo:f_2:d_2:f_1:d_1:bad] solverNewtonDumped
[ 41, 1] ( 2.55e-06 , 1.04e-07 ) [ 1.32e-06 , 7.53e-08 ] 1.00       [0:0:0:0:0:0:0]
[ 42, 1] ( 1.04e-07 , 1.54e-10 ) [ 8.28e-08 , 2.23e-10 ] 1.00       [0:0:0:0:0:0:0]
[ 43, 1] ( 1.54e-10 , 4.91e-15 ) [ 2.24e-10 , 2.40e-15 ] 1.00       [0:0:0:0:0:0:0]

.................. CONTROLS nonlinear system solver ..................
---------------------------- NewtonDumped ----------------------------
n_power        = 4             check_angle    = 120 [degree]
c1             = 0.010000      lambda_min     = 1.0000e-10
dump_min       = 0.40000       dump_max       = 0.90000
----------------------------------------------------------------------

.................... BIG nonlinear system solver .....................
---------------------------- NewtonDumped ----------------------------
n_power        = 2             check_angle    = 120 [degree]
c1             = 0.010000      lambda_min     = 1.0000e-10
dump_min       = 0.40000       dump_max       = 0.90000
ratio ||f||_2  = 1.4000        ratio ||d||_2  = 1.4000
ratio ||f||_1  = 1.4000        ratio ||d||_1  = 1.4000
----------------------------- STATISTIC ------------------------------
Elapsed Time   = 40.1[ms]      timeout        = 0 [ms]
iteration      = 43            tolerance      = 1.000e-09
max iterations = 300           N. Equations   = 1606
max acc. iter. = 800           N. System pars = 400
Converged      = YES           Memory Used    = 160Kb (+66bytes)
---------------------------- CONTINUATION ----------------------------
Initial Step   = 0.2           Minimum Step   = 0.001
Reduce Factor  = 0.5           Augment Factor = 1.5
Few iterations = 8
---------------------------- EVALUATIONS -----------------------------
Function       = 150           Jacobian       = 43
Factorization  = 43            Inversion      = 192
........................... last residuals ...........................
last ||f||_inf = 5.8054e-13    last ||d||_inf = 3.6932e-13
last ||f||_1   = 4.9073e-15    last ||d||_1   = 2.3980e-15
last ||f||_2   = 2.3243e-14    last ||d||_2   = 1.2338e-14
----------------------------------------------------------------------
              __   __             ___  __   __   ___  __              
             /  ` /  \ |\ | \  / |__  |__) / _` |__  |  \             
             \__, \__/ | \|  \/  |___ |  \ \__> |___ |__/             
                                                                      
Check Jacobian Begin
#ERR 1 Jacobian block N. 50 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  3,  1] =     -0.14601 / -0.14619     [A/FD] ---   0.00017309 / 0.11840      [err/err(%)]
jac[  3,  5] =     -0.14601 / -0.14619     [A/FD] ---   0.00017309 / 0.11840      [err/err(%)]

#ERR 2 Jacobian block N. 51 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  0,  1] =    -0.049244 / -0.049375    [A/FD] ---   0.00013116 / 0.26565      [err/err(%)]
jac[  1,  1] =     -0.94031 / -0.94014     [A/FD] ---   0.00016846 / 0.017916     [err/err(%)]
jac[  2,  1] =     0.032460 / 0.032576     [A/FD] ---   0.00011587 / 0.35570      [err/err(%)]
jac[  3,  1] =     -0.43875 / -0.44032     [A/FD] ---    0.0015662 / 0.35570      [err/err(%)]
jac[  0,  5] =    -0.049244 / -0.049375    [A/FD] ---   0.00013116 / 0.26565      [err/err(%)]
jac[  1,  5] =       1.0597 / 1.0599       [A/FD] ---   0.00016846 / 0.015895     [err/err(%)]
jac[  2,  5] =     0.032460 / 0.032576     [A/FD] ---   0.00011587 / 0.35570      [err/err(%)]
jac[  3,  5] =     -0.43875 / -0.44032     [A/FD] ---    0.0015662 / 0.35570      [err/err(%)]

#ERR 3 Jacobian block N. 52 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  0,  1] =     -0.16159 / -0.16387     [A/FD] ---    0.0022807 / 1.3917       [err/err(%)]
jac[  1,  1] =     -0.79453 / -0.79158     [A/FD] ---    0.0029518 / 0.37152      [err/err(%)]
jac[  2,  1] =      0.13892 / 0.14104      [A/FD] ---    0.0021250 / 1.5067       [err/err(%)]
jac[  3,  1] =      -1.8613 / -1.8897      [A/FD] ---     0.028472 / 1.5067       [err/err(%)]
jac[  0,  5] =     -0.16159 / -0.16387     [A/FD] ---    0.0022807 / 1.3917       [err/err(%)]
jac[  1,  5] =       1.2055 / 1.2084       [A/FD] ---    0.0029518 / 0.24427      [err/err(%)]
jac[  2,  5] =      0.13892 / 0.14104      [A/FD] ---    0.0021250 / 1.5067       [err/err(%)]
jac[  3,  5] =      -1.8613 / -1.8897      [A/FD] ---     0.028472 / 1.5067       [err/err(%)]

#ERR 4 Jacobian block N. 53 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  3,  0] =       1.0791 / 1.0798       [A/FD] ---   0.00069830 / 0.064669     [err/err(%)]
jac[  0,  1] =      -1.1112 / -1.2530      [A/FD] ---      0.14179 / 11.316       [err/err(%)]
jac[  1,  1] =      0.44567 / 0.63062      [A/FD] ---      0.18495 / 29.329       [err/err(%)]
jac[  2,  1] =       1.0791 / 1.2184       [A/FD] ---      0.13926 / 11.430       [err/err(%)]
jac[  3,  1] =      -14.336 / -16.186      [A/FD] ---       1.8501 / 11.430       [err/err(%)]
jac[  3,  2] =       1.1112 / 1.1119       [A/FD] ---   0.00073768 / 0.066342     [err/err(%)]
jac[  0,  3] =     -0.10991 / -0.11003     [A/FD] ---   0.00012577 / 0.11430      [err/err(%)]
jac[  1,  3] =      0.14335 / 0.14351      [A/FD] ---   0.00016403 / 0.11430      [err/err(%)]
jac[  2,  3] =      0.10912 / 0.10924      [A/FD] ---   0.00012343 / 0.11299      [err/err(%)]
jac[  3,  3] =      -2.4457 / -2.4473      [A/FD] ---    0.0016399 / 0.067010     [err/err(%)]
jac[  3,  4] =       1.0791 / 1.0798       [A/FD] ---   0.00069830 / 0.064669     [err/err(%)]
jac[  0,  5] =      -1.1112 / -1.2530      [A/FD] ---      0.14179 / 11.316       [err/err(%)]
jac[  1,  5] =       2.4457 / 2.6306       [A/FD] ---      0.18495 / 7.0307       [err/err(%)]
jac[  2,  5] =       1.0791 / 1.2184       [A/FD] ---      0.13926 / 11.430       [err/err(%)]
jac[  3,  5] =      -14.336 / -16.186      [A/FD] ---       1.8501 / 11.430       [err/err(%)]
jac[  3,  6] =       1.1112 / 1.1119       [A/FD] ---   0.00073768 / 0.066342     [err/err(%)]
jac[  0,  7] =     -0.10991 / -0.11003     [A/FD] ---   0.00012577 / 0.11430      [err/err(%)]
jac[  1,  7] =      0.14335 / 0.14351      [A/FD] ---   0.00016403 / 0.11430      [err/err(%)]
jac[  2,  7] =      0.10912 / 0.10924      [A/FD] ---   0.00012343 / 0.11299      [err/err(%)]
jac[  3,  7] =     -0.44567 / -0.44731     [A/FD] ---    0.0016399 / 0.36663      [err/err(%)]

#ERR 5 Jacobian block N. 54 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  0,  0] =       2.5655 / 2.6016       [A/FD] ---     0.036088 / 1.3872       [err/err(%)]
jac[  1,  0] =      -4.6823 / -4.7297      [A/FD] ---     0.047396 / 1.0021       [err/err(%)]
jac[  2,  0] =      -3.6610 / -3.6981      [A/FD] ---     0.037071 / 1.0024       [err/err(%)]
jac[  3,  0] =       48.295 / 48.784       [A/FD] ---      0.48903 / 1.0024       [err/err(%)]
jac[  0,  1] =      -47.032 / -36.797      [A/FD] ---       10.235 / 21.762       [err/err(%)]
jac[  1,  1] =       60.765 / 47.324       [A/FD] ---       13.441 / 22.119       [err/err(%)]
jac[  2,  1] =       48.295 / 37.786       [A/FD] ---       10.509 / 21.761       [err/err(%)]
jac[  3,  1] =      -637.10 / -498.46      [A/FD] ---       138.64 / 21.761       [err/err(%)]
jac[  0,  2] =       3.4707 / 3.5040       [A/FD] ---     0.033346 / 0.95164      [err/err(%)]
jac[  1,  2] =      -4.5580 / -4.6018      [A/FD] ---     0.043793 / 0.95164      [err/err(%)]
jac[  2,  2] =      -4.5655 / -4.5998      [A/FD] ---     0.034242 / 0.74443      [err/err(%)]
jac[  3,  2] =       47.032 / 47.484       [A/FD] ---      0.45173 / 0.95133      [err/err(%)]
jac[  0,  3] =      -4.5580 / -4.6326      [A/FD] ---     0.074632 / 1.6110       [err/err(%)]
jac[  1,  3] =       5.9860 / 6.0840       [A/FD] ---     0.098014 / 1.6110       [err/err(%)]
jac[  2,  3] =       4.6823 / 4.7589       [A/FD] ---     0.076642 / 1.6105       [err/err(%)]
jac[  3,  3] =      -62.765 / -63.776      [A/FD] ---       1.0111 / 1.5854       [err/err(%)]
jac[  0,  4] =       4.5655 / 4.6016       [A/FD] ---     0.036088 / 0.78425      [err/err(%)]
jac[  1,  4] =      -4.6823 / -4.7297      [A/FD] ---     0.047396 / 1.0021       [err/err(%)]
jac[  2,  4] =      -3.6610 / -3.6981      [A/FD] ---     0.037071 / 1.0024       [err/err(%)]
jac[  3,  4] =       48.295 / 48.784       [A/FD] ---      0.48903 / 1.0024       [err/err(%)]
jac[  0,  5] =      -47.032 / -36.797      [A/FD] ---       10.235 / 21.762       [err/err(%)]
jac[  1,  5] =       62.765 / 49.324       [A/FD] ---       13.441 / 21.414       [err/err(%)]
jac[  2,  5] =       48.295 / 37.786       [A/FD] ---       10.509 / 21.761       [err/err(%)]
jac[  3,  5] =      -637.10 / -498.46      [A/FD] ---       138.64 / 21.761       [err/err(%)]
jac[  0,  6] =       3.4707 / 3.5040       [A/FD] ---     0.033346 / 0.95164      [err/err(%)]
jac[  1,  6] =      -4.5580 / -4.6018      [A/FD] ---     0.043793 / 0.95164      [err/err(%)]
jac[  2,  6] =      -2.5655 / -2.5998      [A/FD] ---     0.034242 / 1.3171       [err/err(%)]
jac[  3,  6] =       47.032 / 47.484       [A/FD] ---      0.45173 / 0.95133      [err/err(%)]
jac[  0,  7] =      -4.5580 / -4.6326      [A/FD] ---     0.074632 / 1.6110       [err/err(%)]
jac[  1,  7] =       5.9860 / 6.0840       [A/FD] ---     0.098014 / 1.6110       [err/err(%)]
jac[  2,  7] =       4.6823 / 4.7589       [A/FD] ---     0.076642 / 1.6105       [err/err(%)]
jac[  3,  7] =      -60.765 / -61.776      [A/FD] ---       1.0111 / 1.6367       [err/err(%)]

#ERR 6 Jacobian block N. 55 type: FD [(x+l) x (2*(x+l)+p) = 4 x 8]

jac[  0,  0] =       1.1414 / 1.1651       [A/FD] ---     0.023694 / 2.0337       [err/err(%)]
jac[  1,  0] =      -2.8197 / -2.8509      [A/FD] ---     0.031199 / 1.0944       [err/err(%)]
jac[  2,  0] =      -2.2375 / -2.2623      [A/FD] ---     0.024756 / 1.0943       [err/err(%)]
jac[  3,  0] =       29.439 / 29.765       [A/FD] ---      0.32572 / 1.0943       [err/err(%)]
jac[  0,  1] =      -28.174 / -35.312      [A/FD] ---       7.1384 / 20.215       [err/err(%)]
jac[  1,  1] =       36.099 / 45.497       [A/FD] ---       9.3983 / 20.657       [err/err(%)]
jac[  2,  1] =       29.439 / 36.895       [A/FD] ---       7.4561 / 20.209       [err/err(%)]
jac[  3,  1] =      -387.33 / -485.43      [A/FD] ---       98.100 / 20.209       [err/err(%)]
jac[  0,  2] =       2.0490 / 2.0697       [A/FD] ---     0.020756 / 1.0028       [err/err(%)]
jac[  1,  2] =      -2.6981 / -2.7254      [A/FD] ---     0.027331 / 1.0028       [err/err(%)]
jac[  2,  2] =      -3.1414 / -3.1631      [A/FD] ---     0.021693 / 0.68581      [err/err(%)]
jac[  3,  2] =       28.174 / 28.459       [A/FD] ---      0.28540 / 1.0029       [err/err(%)]
jac[  0,  3] =      -2.6981 / -2.7455      [A/FD] ---     0.047471 / 1.7290       [err/err(%)]
jac[  1,  3] =       3.5528 / 3.6153       [A/FD] ---     0.062509 / 1.7290       [err/err(%)]
jac[  2,  3] =       2.8197 / 2.8693       [A/FD] ---     0.049612 / 1.7291       [err/err(%)]
jac[  3,  3] =      -38.099 / -38.752      [A/FD] ---      0.65273 / 1.6844       [err/err(%)]
jac[  0,  4] =       3.1414 / 3.1651       [A/FD] ---     0.023694 / 0.74860      [err/err(%)]
jac[  1,  4] =      -2.8197 / -2.8509      [A/FD] ---     0.031199 / 1.0944       [err/err(%)]
jac[  2,  4] =      -2.2375 / -2.2623      [A/FD] ---     0.024756 / 1.0943       [err/err(%)]
jac[  3,  4] =       29.439 / 29.765       [A/FD] ---      0.32572 / 1.0943       [err/err(%)]
jac[  0,  5] =      -28.174 / -35.312      [A/FD] ---       7.1384 / 20.215       [err/err(%)]
jac[  1,  5] =       38.099 / 47.497       [A/FD] ---       9.3983 / 19.787       [err/err(%)]
jac[  2,  5] =       29.439 / 36.895       [A/FD] ---       7.4561 / 20.209       [err/err(%)]
jac[  3,  5] =      -387.33 / -485.43      [A/FD] ---       98.100 / 20.209       [err/err(%)]
jac[  0,  6] =       2.0490 / 2.0697       [A/FD] ---     0.020756 / 1.0028       [err/err(%)]
jac[  1,  6] =      -2.6981 / -2.7254      [A/FD] ---     0.027331 / 1.0028       [err/err(%)]
jac[  2,  6] =      -1.1414 / -1.1631      [A/FD] ---     0.021693 / 1.8651       [err/err(%)]
jac[  3,  6] =       28.174 / 28.459       [A/FD] ---      0.28540 / 1.0029       [err/err(%)]
jac[  0,  7] =      -2.6981 / -2.7455      [A/FD] ---     0.047471 / 1.7290       [err/err(%)]
jac[  1,  7] =       3.5528 / 3.6153       [A/FD] ---     0.062509 / 1.7290       [err/err(%)]
jac[  2,  7] =       2.8197 / 2.8693       [A/FD] ---     0.049612 / 1.7291       [err/err(%)]
jac[  3,  7] =      -36.099 / -36.752      [A/FD] ---      0.65273 / 1.7760       [err/err(%)]

skipping...
Last block: OK
Check Jacobian End
target [Lagrange,Mayer]       = [ 0.000, -0.04806 ]
[Penalties/Barriers,Controls] = [ 0.000, 3.136e-06 ]
All Done Folks!
