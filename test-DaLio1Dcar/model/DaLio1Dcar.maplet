# 
# 
# XOptima
# Solution of Optimal Control Problems (c) 
# University of Trento
# Optimal Control of a idealized 1D motorcycle
# Author:       
# Date:         
# Motorcycle model
restart:
# Dinamic system (in time domain)
EQ1 := diff(s(zeta),zeta) - T(zeta)*v(zeta) ;
EQ2 := diff(v(zeta),zeta) - T(zeta)*a(p(zeta)) ;
EQ3 := diff(p(zeta),zeta) - T(zeta)*j(zeta) ;
EQ4 := diff(T(zeta),zeta) ;
vars := [s(zeta),v(zeta),p(zeta),T(zeta)];
ctrl := [j(zeta)];
eqns := [EQ||(1..4)];
# Optimal control
# Load MBSymba(c) Multibody library and others
# Load optimal control library
with(XOptima):
interface(rtablesize=20):
# Optimal control problem definition
# Load dynamic system
# Load the ODE dynamic system: list of controls, state variables and differential equations.
# By default the command set the indepenedent variable equal to "zeta".
# Map Maple mesh functions to methods of C++ objects 
loadDynamicSystem( equations     = eqns,
                   states        = vars, 
                   controls      = ctrl,
                   meshFunctions = []) ;
# Boundary conditions and jump conditions
# Longitudinal and lateral accelerations as a function respectivelly of pedal  and steer angle.:
addBoundaryConditions(initial = [s, v, p],
                      final   = [s, v]);
# Dispaly the bounddary condition activation status:
infoBoundaryConditions();
# Target: performance criterion
# A small quantity epsilon is added to the denominator to avoid singularities
penScale := T(zeta);
setTarget( lagrange = penScale*(1+wJ*j(zeta)^2),
           mayer    = 0*T(zeta_f));
addCheck([T(zeta)>0]) ;
# Path constraints
# Ellipse of adherence
EPSI := 0.001 ;
TOL  := 0.001 ;
addUnilateralConstraint( T(zeta) > 0,
                         timePositive,
                         tolerance=0.01,
                         epsilon=0.01,
                         scale=1 );
addUnilateralConstraint( p(zeta) > -1,
                         pMin,
                         tolerance = tol_max,
                         epsilon   = epsi_max,
                         scale     = penScale );
addUnilateralConstraint( p(zeta) < +1,
                         pMax,
                         tolerance = tol_max,
                         epsilon   = epsi_max,
                         scale     = penScale );
addUnilateralConstraint( a(p(zeta))/a_max < 1,
                         aMax,
                         tolerance = tol_max,
                         epsilon   = epsi_max,
                         barrier   = true,
                         scale     = penScale );
addUnilateralConstraint( a(p(zeta))/a_min < 1, # attenzione a_min < 0!!!!!
                         aMin,
                         tolerance = tol_max,
                         epsilon   = epsi_max,
                         barrier   = true,
                         scale     = penScale );
# Control constraints
addControlBound( j,
                 min         = -1,
                 max         = 1,
                 controlType = "U_COS_LOGARITHMIC",
                 tolerance   = tol_ctrl_max,
                 epsilon     = epsi_ctrl_max,
                 scale       = penScale ) ;
# User defined functions
mapUserFunctionToRegularized(posPart,"PositivePartRegularizedWithPolynomial",["h"=0.01]) ;
addUserFunction(a(p)=posPart(p)*a_slope_max-posPart(-p)*a_slope_min);
addUserFunction(blend(s,m,M)=(1-s)*m+s*M);
#blend := (s,m,M)->(1-s)*m+s*M;
# Generation of optimal control equations and C++ code
# Set default parameters (optional)
# It is possible to define the default values for all parameters that appear in the full set of equations of the optimal control problem.
# This is an optional command that the user may need if he wish to automatically produce a file data. 
# The command can called more than onec with different arguments which will be added to a global list.
data := [
  a_max         = 5,
  a_min         = -5,
  a_slope_max   = 3,
  a_slope_min   = 10,
  p_i           = 0,
  s_i           = 0,
  s_f           = 200,
  v_i           = 10,
  v_f           = 10,
  wJ            = 0.0,
  epsi_max      = 0.01,
  tol_max       = 0.01,
  epsi_min      = 0.0001,
  tol_min       = 0.0001,
  tol_ctrl_max  = 0.01,
  epsi_ctrl_max = 0.01,
  tol_ctrl_min  = 0.001,
  epsi_ctrl_min = 0.001,
  Tguess        = 10
]:
# Post process variables
# Add standard post process variables in the output of the numerical solver: state variables, lagrange multipliers, controls, penalties and mesh variables.
post_list := [[a(p(zeta)),"acc"]];#[[Tmax_normalized(v(zeta)), "Tmax_norma"]] :

CONTINUATION := [ [[j,"epsilon"]=blend(s,tol_ctrl_max,tol_ctrl_min),
                  [j,"tolerance"]=blend(s,epsi_ctrl_max,epsi_ctrl_min)],
                 [[aMax,"epsilon"]=blend(s,epsi_max,epsi_min),
                  [aMin,"epsilon"]=blend(s,epsi_max,epsi_min),
                  [aMax,"tolerance"]=blend(s,tol_max,tol_min),
                  [aMin,"tolerance"]=blend(s,tol_max,tol_min)]] ;


# Select upwind
#setFDorder([3],"backward");
#setFDorderCoEquation([p],"forward") ;
Describe(generateOCProblem);
generateOCProblem( "DaLio1Dcar",
                    post_processing = post_list,
                    parameters     = data,
                    mesh           = [ length=1, n=1000 ],
                    controls_guess = [ j = 0 ],
                    continuation   = CONTINUATION,
                    states_guess   = [ v = v_i, s=v_i*zeta*Tguess, T=Tguess] ) ;
XOptimaPars:-plot_dependence() ;

